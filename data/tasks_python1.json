{
  "data": {
    "Питон-1": {
      "Задачи на базовые операции": [
        {
          "title": "Упражнения",
          "title_machine_friendly": "Python1_Zadachi_na_bazovye_operatsii_Uprazhnenija",
          "section": "Задачи на базовые операции",
          "text": "а) пользователь вводит целое число, программа выводит число, делённое на 10\n\nб) пользователь вводит сумму в рублях, программа переводит её в доллары (курс можно взять из интернета)\n\nв) пользователь вводит температуру в цельсиях, программа её переводит в Фаренгейты\n\nt<sub>F</sub> = (t<sub>C</sub> × 9/5) + 32\n\n**Для проверки:**\n\n°C  | °F\n---:|----:\n-20 | -4\n-15 | 5\n0   | 32\n20  | 68\n36  | 96.8\n50  | 122\n100 | 212\n\nг) Пользователь вводит рост в \"американском стиле\": футы и дюймы (два input'a - один для футов, второй для дюймов). Программа переводит рост в см\n\n* 1 дюйм = 2.54см\n* 1 фут = 30.48см\n* 1 фут = 12 дюймов ровно\n\nДля проверки:\n\nФуты, дюймы | Сантиметры\n:----------:|:---------:\n4'10\"       | 147\n5'0\"        | 152\n5'5\"        | 165\n5'7\"        | 170\n6'2\"        | 188\n6'6\"        | 188"
        },
        {
          "title": "Високосный год",
          "title_machine_friendly": "Python1_Zadachi_na_bazovye_operatsii_Visokosnyj_god",
          "section": "Задачи на базовые операции",
          "text": "Пользователь вводит номер года (например, 2021).\nпрограмма выводит True, если он високосный и False в противном случае\n\nГод високосный, если:\n* он делится на 4, но не заканчивается на два нуля\n* либо заканчивается на два нуля, и при этом делится на 400\n\n*Примечание. Использовать условный оператор if не нужно, достаточно составить выражение и передать его результат функции `print()`*\n<details><summary>Подсказка 1</summary>Делимость можно проверить с помощью операций %, == и != </details>\n<details><summary>Подсказка 2</summary>Нужно составить несколько операций сравнений и скомбинировать с помощью and и or, получив выражения вида:\n\n```python\n((...) and (...)) or ((...) and (...))\n```\n</details>"
        },
        {
          "title": "Перевод секунд в дд:мм:чч:сс",
          "title_machine_friendly": "Python1_Zadachi_na_bazovye_operatsii_Perevod_sekund_v_dd:mm:chch:ss",
          "section": "Задачи на базовые операции",
          "text": "а) Пользователь вводит большое число в секундах, программа пересчитывает его в количество дней, часов, минут, секунд \n\nДля проверки:\n\nНа входе | На выходе\n--------:|----------------\n315      | 0 дней 0 часов 5 минут 13 секунд\n720      | 0 дней 12 часов 0 минут 0 секунд\n25800    | 0 дней 7 часов 10 минут 0 секунд\n937848   | 1 дней 2 часов 3 минут 4 секунд\n\n<details><summary>Подсказка</summary>Здесь понадобятся операции % (остаток от деления) и // (деление без остатка)</details>\n\n★ б) То же самое, но программа прибавляет к введённому времени два с половиной часа. При этом время должно отображаться корректно (число минут по-прежнему должно быть меньше 60 и т.п.)"
        },
        {
          "title": "Кредитный калькулятор",
          "title_machine_friendly": "Python1_Zadachi_na_bazovye_operatsii_Kreditnyj_kal'kuljator",
          "section": "Задачи на базовые операции",
          "text": "Пользователь вводит желаемую сумму кредита в тысячах рублей и срок в годах (и то, и другое может быть дробным числом),\nпрограмма выводит сумму ежемесячного платежа. Ставка 5.5% в год\n\n![\\Large A=P\\frac{r(1+r)^n}{(1+r)^n-1}](https://latex.codecogs.com/svg.latex?\\Large&space;A=P\\frac{r(1+r)^n}{(1+r)^n-1})\n\nОбозначение | Расшифровка  | Единица измерения\n-:|------------------------|-----\nA | ежемесячный платёж     | ₽\nP | размер кредита         | ₽\nr | ставка кредита в месяц | доли единицы (не %)\nn | срок кредита           | месяцы\n\nНекоторые единицы измерения в задании и в формуле различается, так что программа должна перевести некоторые значения в другие единицы.\n\n**Для проверки:**\n\nСумма кредита, р. | Срок, лет | Ежемесячный платёж, ₽\n-----------------:|-----------|----------------------\n50 000            | 2         | 2 205\n2 000 000         | 2         | 88 192\n1 000 000         | 3         | 30 196\n5 000 000         | 4         | 116 283"
        }
      ],
      "Задачи на условный оператор": [
        {
          "title": "Покупка в долларах",
          "title_machine_friendly": "Python1_Zadachi_na_uslovnyj_operator_Pokupka_v_dollarah",
          "section": "Задачи на условный оператор",
          "text": "Пользователь хочет совершить покупку за 100 **долларов**. А у пользователя счёт в рублях, поэтому программа спрашивает, сколько у него **рублей** на счету.\n\nа) если денег хватает, то программа выводит на экран остаток на счету после покупки\n\nб) если не хватает, то пишет, сколько рублей не хватает для покупки\n\nКурс доллара для можно взять любой или скопировать из интернета"
        },
        {
          "title": "Льготный курс обмена",
          "title_machine_friendly": "Python1_Zadachi_na_uslovnyj_operator_L'gotnyj_kurs_obmena",
          "section": "Задачи на условный оператор",
          "text": "Пользователь пишет, сколько долларов он хочет купить. Программа выбирает курс в зависимости от размера покупки и выводит сумму в рублях\n\n  Сумма  |  Курс\n---------|-------\nдо $1000 | 74.30₽\nот $1000 | 73.96₽"
        }
      ],
      "Задачи на цикл while": [
        {
          "title": "Лесенка",
          "title_machine_friendly": "Python1_Zadachi_na_tsikl_while_Lesenka",
          "section": "Задачи на цикл while",
          "text": "Пользователь вводит целое число n (от 1 до 9), программа выводит лесенку из n ступенек, i-я ступень состоит из цифр от 1 до i без пробелов.\nНапример, для n = 4 нужно вывести:\n```\n1\n12\n123\n1234\n```"
        },
        {
          "title": "Количество и сумма цифр в числе",
          "title_machine_friendly": "Python1_Zadachi_na_tsikl_while_Kolichestvo_i_summa_tsifr_v_chisle",
          "section": "Задачи на цикл while",
          "text": "Пользователь вводит большое целое число (например, 4568)\n\nа) программа выводит на экран все цифры этого числа по одной (в любом порядке)\n\nб) программа считает количество цифр в этом числе\n\nв) программа считает сумму цифр в этом числе (например, 4+5+6+8 для числа 4568)\n<details><summary>Подсказка</summary>\nЗдесь вам помогут:\n<pre>\nwhile ...\ndigit = x % 10\nx = x // 10\n</pre>\n</details>"
        },
        {
          "title": "Подписка",
          "title_machine_friendly": "Python1_Zadachi_na_tsikl_while_Podpiska",
          "section": "Задачи на цикл while",
          "text": "Пользователь хочет подписаться на некий сервис. Подписка будет стоить 1000₽ в месяц.\n\nПользователь вводит сумму на своём счету (один раз). Дальше начинается цикл, в котором программа спрашивает “Хотите ли продолжить подписку (y/n)?” Пусть 1 итерация цикла означает 1 месяц.\n* Если пользователь печатает  букву “n”, цикл прекращается, программа показывает сколько осталось на счету денег.\n* Если печатает “y”, то подписка продолжается, со счёта списывается 1000р, и цикл продолжается. При этом если денег на счету недостаточно, то подписка тоже прекратится.\nБаланс на счету пользователя ни в коем случае не должен оказаться меньше нуля.\n\n*Примечание: В этой задаче цикл может прерваться по двум совершенно не связанным друг с другом условиям: пользователь решил отписаться от сервиса или у него кончились деньги. Сложность в том, что нужно придумать, как и где записать эти условия.*\n\n*Примечание 2: Здесь будет удобно воспользоваться конструкцией while-else, которая поможет понять, закончился ли цикл по \"штатному\" условию или по инструкции break*"
        },
        {
          "title": "Проверка номера кредитки",
          "title_machine_friendly": "Python1_Zadachi_na_tsikl_while_Proverka_nomera_kreditki",
          "section": "Задачи на цикл while",
          "text": "Последняя цифра номера банковской карты (и некоторых других номеров карт и счетов) - это всегда контрольная сумма, которая считается по алгоритму Луна. Таким образом, если пользователь ошибётся в одной цифре или перепутает две цифры местами, то это легко вычислить на стороне терминала, не делая запрос в банк. \n\nПользователь вводит номер кредитной карты (16-значное целое число), а программа вычисляет и проверяет проверяет контрольную сумму, и говорит, валидный номер или нет. Алгоритм подсчёта суммы:\n\n1. Цифры проверяемой последовательности нумеруются справа налево (Последняя цифра тоже считается, её номер - единица).\n2. Цифры, оказавшиеся на нечётных местах, остаются без изменений.\n3. Цифры, стоящие на чётных местах, умножаются на 2.\n4. Если в результате такого умножения возникает число больше 9, оно заменяется суммой цифр получившегося произведения — однозначным числом, то есть цифрой.\n5. Все полученные в результате преобразования цифры складываются. Если сумма кратна 10, то исходные данные верны."
        }
      ],
      "Задачи на циклы for": [
        {
          "title": "Упражнения",
          "title_machine_friendly": "Python1_Zadachi_na_tsikly_for_Uprazhnenija",
          "section": "Задачи на циклы for",
          "text": "а) Вывести на экран все числа от 25 до 70 не включительно, посчитать их сумму\n\nб) Вывести все числа от 20 до 100, которые делятся на 5\n\nв) Вывести все числа от 20 до 100, которые делятся на 7 или на 9\n\nг) Вывести все числа вида:\n```\n1\n10\n100\n…\n1000000\n```\n(до миллиона включительно)\n<details><summary>Подсказка</summary>Здесь range напрямую использовать не получится, т.к. он работает только с фиксированным шагом (арифметическая прогрессия). Но можно придумать, как свести требуемые числа к выражению, которые содержат переменную, растущую линейно.</details>\n<details><summary>Подсказка 2</summary>\n\n    * 1 = 10 ** 0\n    * 10 = 10 ** 1\n    * 100 = 10 ** 2\n    * 1000 = 10 ** 3\n    ...\n\n    также это можно сделать через строки:\n\n    * '1' = '1' + '0' * 0\n    * '10' = '1' + '0' * 1\n    * '100' = '1' + '0' * 2\n    * '1000' = '1' + '0' * 3\n    ...\n</details>\n\nд) Вывести все степени двойки от 1 (2<sup>0</sup>) до 1024 (2<sup>10</sup>) включительно\n\n<details><summary>Подсказка</summary>\n\n    * 1 = 2 ** 0\n    * 2 = 2 ** 1\n    * 4 = 2 ** 2\n    * 8 = 2 ** 3\n    ...\n\n    также это можно сделать через битовые операции, если вы привыкли мыслить как программист:\n\n    * 1 = 1 << 0\n    * 2 = 1 << 1\n    * 4 = 1 << 2\n    * 8 = 1 << 3\n    ...\n</details>\n\n---\n\nрешить задачу про сумму цифр в числе через цикл for"
        }
      ],
      "Задачи на списки и строки": [
        {
          "title": "Упражнения",
          "title_machine_friendly": "Python1_Zadachi_na_spiski_i_stroki_Uprazhnenija",
          "section": "Задачи на списки и строки",
          "text": "б) Дан список чисел. Вывести на экран эти числа, делённые на 100.\n\n``` python\nnumbers = [614, 667, 919, 793, 423, 314, 974, 249, 915, 708, 361, 358, 2, 435, 676, 638, 682, 891, 46, 131, 409, 739, 289, 187, 683, 749, 569, 441, 403, 902, 652, 941, 607, 885, 686, 958, 311, 949, 829, 511, 478, 995, 612, 444, 846, 636, 162, 770, 862, 869, 482, 787, 315, 936, 324, 972, 707, 346, 303, 738, 340, 894, 47, 997, 998, 557, 641, 662, 120, 104, 414, 347, 855, 102, 538, 506, 389, 795, 129, 690, 470, 937, 227, 924, 179, 496, 7, 77, 224, 412, 394, 374, 492, 246, 979, 63, 591, 385, 691, 547, 380, 6, 206, 766, 462, 755, 10, 985, 79, 719, 863, 15, 740, 41, 489, 645, 566, 94, 527, 796, 925, 605, 51, 890, 386, 698, 88, 382, 416, 799, 57, 695, 378, 345, 880, 101, 270, 208, 451, 279, 818, 809, 384, 286, 34, 282, 723, 711, 744, 176]\n```\n\nа) Дан список имен. Найдите самое длинное имя, если таких имен несколько - выведи любое их них\n\n``` python\nnames = [\"Иван\", \"Ирина\", \"Вячеслав\", \"Василий\", \"Петр\"]\n```"
        },
        {
          "title": "Курс доллара",
          "title_machine_friendly": "Python1_Zadachi_na_spiski_i_stroki_Kurs_dollara",
          "section": "Задачи на списки и строки",
          "text": "Есть список чисел (можно скопировать в программу)\n\n``` python\nusd = [63.1385, 63.9091, 63.4342, 63.1742, 62.7977, 63.472, 63.7708, 63.949, 63.047, 63.6016, 63.4536, 63.3085, 63.7698, 63.6873, 63.7413, 64.3008, 64.9213, 65.5177, 65.6097, 66.9909, 66.3274, 66.4437, 66.0784, 66.1854, 67.5175, 72.0208, 71.472, 74.0274, 73.1882, 74.1262, 73.8896, 77.2131, 80.157, 78.0443, 80.8815, 78.8493, 77.7928, 78.7223, 77.7325, 76.4074, 75.455, 75.7499, 74.605, 73.7515, 73.5245, 73.315, 73.7145, 74.7119, 73.9441, 74.6657, 76.2562, 77.0416, 75.129, 74.7163, 74.496, 74.5706, 73.6894, 72.7263, 73.9719, 74.1169, 73.8725, 73.4326, 73.5819, 73.9298, 73.2056, 72.9798, 72.3918, 72.3381, 70.924, 71.8804, 71.5962, 71.1408, 71.0635, 71.1012, 70.752, 69.7114, 68.9831, 68.3413, 69.0151, 68.6319, 68.3123, 68.6745, 68.6183, 69.1219, 70.395, 69.7524, 69.4822, 69.618, 69.5725, 69.4835, 68.8376, 68.8376, 69.466, 69.1284, 69.9513, 70.4413, 70.4413, 70.5198, 70.4999, 71.3409]\n```\n\nа) Вывести элементы списка, которые больше, чем 70\n\nб) Вычислить среднее арифметическое всего списка\nФормула (здесь n - количество элементов):\n\n![\\Large s=\\frac{x_1+x_2+\\ldots+x_n}{n}](https://latex.codecogs.com/svg.latex?\\Large&space;s=\\frac{x_1+x_2+\\ldots+x_n}{n})\n\n<details><summary>Подсказка 1</summary>стандартная ф-ия len() даст количество элементов в списке. Функция sum() - сумму.</details>\n\nв) Вычислить дисперсию (здесь s - среднее арифметическое)\n\n![\\Large\\sigma=\\sqrt{\\frac{(x_1-s)^2+(x_2-s)^2+\\ldots+(x_n-s)^2}{n-1}}](https://latex.codecogs.com/svg.latex?\\Large\\sigma=\\sqrt{\\frac{(x_1-s)^2+(x_2-s)^2+\\ldots+(x_n-s)^2}{n-1}})"
        },
        {
          "title": "Список звонков",
          "title_machine_friendly": "Python1_Zadachi_na_spiski_i_stroki_Spisok_zvonkov",
          "section": "Задачи на списки и строки",
          "text": "Дан список номеров телефонов (можно скопировать в программу). Все телефоны одной и той же длины, в одном и том же формате, один и тот же код страны и код оператора везде из трёх цифр.\n\n``` python\nnums = ['+7 (960) 870-22-29', '+7 (926) 184-98-14', '+7 (960) 750-30-94', '+7 (926) 302-98-89', '+7 (916) 634-55-56', '+7 (960) 814-20-17', '+7 (960) 438-13-75', '+7 (926) 184-98-14', '+7 (960) 616-92-88', '+7 (999) 325-03-31', '+7 (495) 804-89-53', '+7 (926) 184-98-14', '+7 (916) 950-04-91', '+7 (960) 616-92-88', '+7 (960) 616-92-88', '+7 (999) 325-03-31', '+7 (915) 478-27-38', '+7 (916) 254-83-22', '+7 (495) 704-04-87', '+7 (960) 750-30-94', '+7 (499) 148-33-29', '+7 (916) 634-55-56', '+7 (926) 184-98-14', '+7 (900) 045-24-15', '+7 (900) 922-37-25', '+7 (960) 814-20-17', '+7 (495) 804-89-53', '+7 (960) 870-22-29', '+7 (960) 616-92-88', '+7 (960) 750-30-94', '+7 (499) 932-24-07', '+7 (999) 325-03-31', '+7 (916) 634-55-56', '+7 (960) 750-30-94', '+7 (960) 870-22-29', '+7 (960) 750-30-94', '+7 (960) 870-22-29', '+7 (915) 478-27-38', '+7 (960) 616-92-88', '+7 (916) 254-83-22', '+7 (999) 872-70-56', '+7 (926) 184-98-14', '+7 (495) 804-89-53', '+7 (495) 804-89-53', '+7 (495) 804-89-53', '+7 (960) 616-92-88', '+7 (926) 208-72-22', '+7 (900) 922-37-25', '+7 (916) 950-04-91', '+7 (915) 478-27-38', '+7 (926) 208-72-22', '+7 (960) 911-09-70', '+7 (926) 208-72-22', '+7 (999) 325-03-31', '+7 (499) 163-06-85', '+7 (915) 478-27-38', '+7 (926) 302-98-89', '+7 (999) 325-03-31', '+7 (960) 870-22-29', '+7 (916) 950-04-91', '+7 (916) 634-55-56', '+7 (916) 254-83-22', '+7 (900) 335-38-27', '+7 (900) 045-24-15', '+7 (900) 481-88-07', '+7 (999) 325-03-31', '+7 (915) 478-27-38', '+7 (499) 163-06-85', '+7 (960) 870-22-29', '+7 (926) 897-30-99', '+7 (900) 045-24-15', '+7 (916) 950-04-91', '+7 (926) 302-98-89', '+7 (926) 302-98-89', '+7 (900) 481-88-07', '+7 (495) 704-04-87', '+7 (499) 163-06-85', '+7 (495) 804-89-53', '+7 (960) 870-22-29', '+7 (960) 750-30-94', '+7 (900) 922-37-25', '+7 (916) 254-83-22', '+7 (495) 704-04-87', '+7 (960) 814-20-17', '+7 (916) 950-04-91', '+7 (916) 254-83-22', '+7 (960) 750-30-94', '+7 (916) 634-55-56', '+7 (495) 704-04-87', '+7 (999) 325-03-31', '+7 (495) 804-89-53', '+7 (915) 949-38-81', '+7 (926) 208-72-22', '+7 (499) 163-06-85', '+7 (916) 634-55-56', '+7 (916) 634-55-56', '+7 (960) 911-09-70', '+7 (999) 951-31-21', '+7 (900) 481-88-07', '+7 (499) 148-33-29', '+7 (900) 922-37-25', '+7 (926) 208-72-22', '+7 (900) 045-24-15', '+7 (495) 804-89-53', '+7 (916) 634-55-56', '+7 (960) 616-92-88', '+7 (960) 750-30-94', '+7 (916) 634-55-56', '+7 (499) 163-06-85', '+7 (916) 950-04-91', '+7 (915) 949-38-81', '+7 (960) 870-22-29', '+7 (900) 335-38-27', '+7 (960) 870-22-29', '+7 (926) 184-98-14', '+7 (900) 045-24-15', '+7 (915) 478-27-38', '+7 (926) 184-98-14', '+7 (900) 045-24-15', '+7 (900) 045-24-15', '+7 (960) 870-22-29', '+7 (495) 804-89-53', '+7 (900) 045-24-15', '+7 (915) 949-38-81', '+7 (916) 950-04-91', '+7 (960) 870-22-29', '+7 (999) 325-03-31', '+7 (916) 634-55-56', '+7 (499) 163-06-85', '+7 (960) 814-20-17', '+7 (499) 148-33-29', '+7 (999) 872-70-56', '+7 (999) 325-03-31', '+7 (900) 922-37-25', '+7 (960) 616-92-88', '+7 (900) 922-37-25', '+7 (900) 045-24-15', '+7 (916) 634-55-56', '+7 (900) 045-24-15', '+7 (900) 045-24-15', '+7 (999) 872-70-56', '+7 (960) 750-30-94', '+7 (900) 922-37-25', '+7 (960) 911-09-70', '+7 (999) 951-31-21', '+7 (926) 184-98-14', '+7 (900) 922-37-25', '+7 (960) 616-92-88', '+7 (499) 163-06-85', '+7 (495) 804-89-53', '+7 (926) 184-98-14', '+7 (916) 950-04-91', '+7 (960) 870-22-29', '+7 (495) 804-89-53', '+7 (999) 325-03-31', '+7 (900) 045-24-15', '+7 (926) 208-72-22', '+7 (926) 302-98-89', '+7 (926) 302-98-89', '+7 (900) 922-37-25', '+7 (960) 870-22-29', '+7 (900) 481-88-07', '+7 (900) 045-24-15', '+7 (916) 950-04-91', '+7 (960) 750-30-94', '+7 (960) 911-09-70', '+7 (499) 148-33-29', '+7 (960) 616-92-88', '+7 (926) 208-72-22', '+7 (499) 932-24-07', '+7 (916) 634-55-56', '+7 (916) 634-55-56', '+7 (926) 208-72-22', '+7 (900) 045-24-15', '+7 (926) 208-72-22', '+7 (960) 616-92-88', '+7 (495) 804-89-53', '+7 (495) 704-04-87', '+7 (960) 870-22-29', '+7 (499) 932-24-07', '+7 (960) 750-30-94', '+7 (999) 325-03-31', '+7 (900) 922-37-25', '+7 (999) 325-03-31', '+7 (900) 045-24-15', '+7 (960) 750-30-94', '+7 (926) 184-98-14', '+7 (960) 911-09-70', '+7 (916) 707-62-70', '+7 (926) 302-98-89', '+7 (960) 750-30-94', '+7 (900) 481-88-07', '+7 (926) 184-98-14', '+7 (900) 922-37-25', '+7 (495) 804-89-53', '+7 (960) 814-20-17', '+7 (900) 922-37-25', '+7 (926) 302-98-89', '+7 (499) 932-24-07', '+7 (499) 163-06-85']\n```\n\nИз списка номеров телефонов:\n\nа) вывести первые 10 номеров\n\nб) вывести номера с 5го по 10й не включительно (считая от нуля)\n\nв) каждый десятый номер из списка\n\nг) вывести на экран код города каждого телефона\n\nд) вывести на экран только телефоны, у которых код города 499 или 495\n\nе) составить список ```list``` московских номеров (см. п. (д))\n\n★ ж) те же задания, но более сложный список\n``` python\nnums = ['8 (999) 031 31 32', 79005552543, '7 (999) 031-31-32', 74997177804, '7 (499) 7816448', '8 916 599 87 17', '+7-499-717-78-04', '7 (960) 225 17 73', '+7 999 031 31 32', '7 (499) 381 85 94', '7-499-781-64-48', 84993818594, '7 915 861 14 30', '8 (926) 2006304', '+7 (499) 717 78 04', '7 999 251 14 96', '8 926 200 63 04', '+7 (900) 5552543', 89165998717, '+7 (960) 9921345', '+7 916 272 29 48', '8 (900) 5552543', '+79158611430', 79168571046, '8 (926) 200-63-04', '89165163715', 74997177804, 79600729120, 89990232281, '79162722948', '74956285138', '79600729120', '7-499-381-85-94', '8 499 717 78 04', 79161853299, 79602251773, '+79991820683', 84999731258, '+7-900-372-17-33', '+7 (495) 628 51 38', '+7 915 861 14 30', 89165163715, 84953524680, '7 (499) 973 12 58', 89262006304, '8-915-861-14-30', '+7 999 023 22 81', '7 916 185 32 99', '7 (499) 636 12 24', '+79165998717', '84997816448', '7 (916) 857 10 46', '+7 (960) 225 17 73', 89165163715, '7-960-072-91-20', '89602251773', 74995885010, '7-499-636-12-24', '+7 (900) 372 17 33', '7 (960) 0729120', '+7-499-781-64-48', 89262006304, '+7 (900) 5552543', 79005552543, '+7-960-810-64-12', 84995885010, 79600729120, 89608106412, '+7 495 352 46 80', 89005552543, '8 (916) 5163715', 89602251773, '7-916-599-87-17', '79608106412', '8 916 857 10 46', '8 (900) 555 25 43', '8-960-992-13-45', '7 (499) 7177804', 79165163715, '7 (495) 628 51 38', '7-499-588-50-10', 89158611430, '79602251773', 89165998717, 79158611430, '7 (926) 200 63 04', '89992511496', '7-495-628-51-38', '+7 (495) 6285138', '+7 (999) 2511496', '+79602251773', 89165163715, '79162722948', '8 (926) 200 63 04', '8 (916) 5163715', '7 (499) 5885010', '+7 916 516 37 15', '8-999-023-22-81', '8 (916) 857-10-46', 79990313132, '+7 495 628 51 38', '7 916 599 87 17', '+7 (915) 8611430', 89990313132, 79158611430, '8-960-225-17-73', '7 (499) 5885010', '+7 (916) 516 37 15', 89262006304, 79165163715, '+74997177804', 79165163715, 74997177804, '8 (960) 810 64 12', 89165998717, '8 (916) 8571046', '7-900-555-25-43', 79600729120, '+7 (499) 7177804', '8-916-516-37-15', 79005552543, 89990313132, 89992511496, '8 499 381 85 94', 79003721733, '+7 (495) 352-46-80', '+7 (499) 381-85-94', '+79168571046', '7-960-810-64-12', 79003721733, '+7 495 628 51 38', '7 (999) 031 31 32', 79262006304, '+7 (916) 599 87 17', 74997177804, '+74996361224', 89003721733, 79162722948, '7-495-352-46-80', '7 (900) 555-25-43', '+7 (900) 3208711', '8 (916) 5163715', '+7-960-810-64-12', '7 (915) 861 14 30', '7-495-628-51-38', 79005552543, '+7 (960) 225 17 73', '+7 495 628 51 38', '8-916-599-87-17', 79992511496, 89600729120, '+7-916-599-87-17', '7 (960) 9921345', '7 (916) 857 10 46', '+74997816448', '7 (499) 7816448', '+7-926-200-63-04', 79162722948, 79158611430, '8 (499) 5885010', '+7-916-857-10-46', '8 (499) 7177804', 89609921345, '8-916-857-10-46', 89609921345, '7 (499) 381 85 94', '8-495-352-46-80', '7 (495) 352 46 80', '+7 499 781 64 48', 84996361224, '74993818594', '8 999 031 31 32', 89992511496, 89262006304, '7 (916) 185 32 99', 89165998717, 89602251773, 89992511496, 74997816448, '8 (499) 781-64-48', 89600729120, 74997177804, '+7 (999) 251 14 96', '+7 (999) 182 06 83', 79005552543, '+79165163715', 84956285138, '+7 (960) 992 13 45', '84956285138', '+7 (916) 272-29-48', '8-499-717-78-04', 89003721733, 89262006304, '+7-915-861-14-30', '+7 916 272 29 48', '7 (495) 628 51 38', '+7 900 372 17 33', '8 (916) 5998717', '8 499 717 78 04', 89991820683, 89165163715, 79003721733, 89158611430, 79160923145, '8 916 599 87 17', '7 (999) 251 14 96', '7 960 225 17 73', '8 (960) 225-17-73', 84997177804]\n```"
        },
        {
          "title": "Палиндромы",
          "title_machine_friendly": "Python1_Zadachi_na_spiski_i_stroki_Palindromy",
          "section": "Задачи на списки и строки",
          "text": "а) Пользователь вводит слово, программа пишет, палиндром это или нет.\nПалиндром - слово, которое читается задом наперёд так же, как и слева направо, например, “доход”.\n\n★ б) То же самое, но про целое предложение, например:\n\n* “Кит на море - не романтик!”\n\n* “А роза упала на лапу Азора”\n\nПри этом знаки препинания, пробелы и регистр самого текста нужно игнорировать."
        }
      ],
      "Задачи на множества, кортежи и словари": [
        {
          "title": "Уникальные номера телефонов",
          "title_machine_friendly": "Python1_Zadachi_na_mnozhestva,_kortezhi_i_slovari_Unikal'nye_nomera_telefonov",
          "section": "Задачи на множества, кортежи и словари",
          "text": "Взять список из задачи про телефонные звонки (5.2)\n\nа) вывести на экран только уникальные номера (убрать дубликаты), и количество уникальных номеров\n\nб) вывести уникальные коды городов и их количество\n\nв) вывести коды городов, с которых звонили, но только если они находятся среди множества ```{499, 495, 916, 968, 888}```"
        },
        {
          "title": "Количество дней в месяцах",
          "title_machine_friendly": "Python1_Zadachi_na_mnozhestva,_kortezhi_i_slovari_Kolichestvo_dnej_v_mesjatsah",
          "section": "Задачи на множества, кортежи и словари",
          "text": "Пользователь вводит название месяца в формате jan, feb, mar, …, а программа:\n\n* Пишет на экране количество дней в этом месяце. Количество дней в феврале - как в текущем году.\n\n* Считает премию сотруднику из расчета 500р на календарный день за указанный месяц.\n\nа) решить на основе словаря (составить вручную)\n\n``` python\ndays = {'jan': 31, 'feb': 28, …}\n```\n\nб) решить на основе операции in и if-elif\n\n``` python\nif mon in {'jan', 'mar', 'may' …}:\n    days = 31\nelif …\n    days = 30\nelif …\n```"
        },
        {
          "title": "Подсчёт символов в строке",
          "title_machine_friendly": "Python1_Zadachi_na_mnozhestva,_kortezhi_i_slovari_Podschet_simvolov_v_stroke",
          "section": "Задачи на множества, кортежи и словари",
          "text": "Пользователь вводит строку, программа составляет словарь, где ключ - это символ, значение - это количество этого символа в этой строке. Пример:\n\n``` python\ns = 'Hello'\nd = {'H': 1, 'e':1, 'l': 2, 'o':1}\n```"
        },
        {
          "title": "Склад одежды",
          "title_machine_friendly": "Python1_Zadachi_na_mnozhestva,_kortezhi_i_slovari_Sklad_odezhdy",
          "section": "Задачи на множества, кортежи и словари",
          "text": "Данные о товарах на складе хранятся в словаре (можно скопировать в программу)\n\n``` python\nitems = [\n    {\n        \"name\": \"Кроссовки\",\n        \"brand\": \"adidas\",\n        \"price\": 3440\n    },\n    {\n        \"name\": \"Кепка\",\n        \"brand\": \"reebok\",\n        \"price\": 3500\n    },\n    {\n        \"name\": \"Рюкзак\",\n        \"brand\": \"reebok\",\n        \"price\": 4800\n    },\n    {\n        \"name\": \"Шорты\",\n        \"brand\": \"puma\",\n        \"price\": 2500\n    },\n    {\n        \"name\": \"Шорты\",\n        \"brand\": \"adidas\",\n        \"price\": 2750\n    },\n    {\n        \"name\": \"Футболка\",\n        \"brand\": \"puma\",\n        \"price\": 1700\n    },\n]\n```\n\nа) Вывести перечень брендов, чьи товары есть на складе (без повторов).\n\nб) Вывести бренд, чьих товаров больше всего на складе\n\nв) Вывести бренд, тип и цену самого дорогого товара"
        },
        {
          "title": "Игральные кубики",
          "title_machine_friendly": "Python1_Zadachi_na_mnozhestva,_kortezhi_i_slovari_Igral'nye_kubiki",
          "section": "Задачи на множества, кортежи и словари",
          "text": "Составить словарь (программно), где ключ - это сумма очков на двух кубиках, а значение - перечень всех комбинаций, которые дадут это количество очков\n\n![Кубики](img/dice1.jpg)\n\nа) Сделать словарь списков списков\n\n``` python\ndice = {\n    2: [[1, 1]],"
        },
        {
          "title": "Факториалы",
          "title_machine_friendly": "Python1_Zadachi_na_mnozhestva,_kortezhi_i_slovari_Faktorialy",
          "section": "Задачи на множества, кортежи и словари",
          "text": "Составить словарь, где ключ - это целое число (от 1 до 30 включительно), а значение - это факториал этого числа\n\n```\n1!  = 1\n2!  = 1×2\n5!  = 1×2×3×4×5\n10! = 1×2×3×...×9×10 = 9!×10\n```\n\nб) Программа спрашивает у пользователя число, и выводит его факториал. Это повторяется до тех пор, пока пользователь не ввёл -1. Причём:\n\n* Если факториал этого числа уже как-то ранее вычислялся, то программа берёт готовое число\n\n* Если нет, то программа считает его от ближайшего ранее вычисленного факториала\n\nНужно свести к минимуму количество операций умножения. Пример:\n\n```\nПользователь ввёл 5\n> Считаем факториал 5, попутно вычисляя факториалы 4, 3 и 2. Все значения сохраняем в кэше.\n\nПользователь ввёл 3\n> Такой факториал мы только что сосчитали, пока считали факториал пяти, берём готовое значение из кэша\n\nПользователь ввёл 7\n> Такой факториал мы не считали, но знаем факториал 5. Поэтому считаем его как 5! * 6 * 7\n```"
        },
        {
          "title": "Болты",
          "title_machine_friendly": "Python1_Zadachi_na_mnozhestva,_kortezhi_i_slovari_Bolty",
          "section": "Задачи на множества, кортежи и словари",
          "text": "Есть большая таблица с массой 1000 болтов по ГОСТу разных диаметров и длин\n<details><summary>Болт шестигранный ГОСТ 7798-70 (кликабельно)</summary>\n<table>\n<tbody>\n<tr>\n<th rowspan=\"2\">Длина, мм</th>\n<th colspan=\"15\">Теоретическая масса 1000 шт. болтов кг при номинальном диаметре резьбы <i>d</i>, мм</th></tr>\n<tr><th>М6</th><th>М8</th><th>М10</th><th>М12</th><th>М14</th><th>М16</th><th>М18</th><th>М20</th><th>М22</th><th>М24</th><th>М27</th><th>М30</th><th>М36</th><th>М42</th><th>М48</th></tr>\n<tr>\n<td>8</td><td>4,306</td><td>8,668</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td></tr>\n<tr>\n<td>10</td><td>4,712</td><td>9,394</td><td>16,68</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td></tr>\n<tr>\n<td>12</td><td>5,118</td><td>10,120</td><td>17,82</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td></tr>\n<tr>                      \n<td>14</td><td>5,524</td><td>10,850</td><td>18,96</td><td>27,89</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td></tr>\n<tr>\n<td>16</td><td>5,930</td><td>11,570</td><td>20,10</td><td>29,48</td><td>43,98</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td></tr>\n<tr>\n<td>18</td><td>6,336</td><td>12,300</td><td>21,23</td><td>31,12</td><td>46,21</td><td>65,54</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td></tr>\n<tr>\n<td>20</td><td>6,742</td><td>13,020</td><td>22,37</td><td>32,76</td><td>48,45</td><td>68,49</td><td>95,81</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td></tr>\n<tr>\n<td>22</td><td>7,204</td><td>13,520</td><td>23,51</td><td>34,40</td><td>50,69</td><td>71,44</td><td>99,52</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td></tr>\n<tr>\n<td>25</td><td>7,871</td><td>14,840</td><td>25,22</td><td>36,86</td><td>54,05</td><td>75,87</td><td>105,10</td><td>133,3</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td></tr>\n<tr>\n<td>28</td><td>8,537</td><td>16,330</td><td>26,92</td><td>39,32</td><td>57,40</td><td>80,29</td><td>110,60</td><td>140,2</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td></tr>\n<tr>\n<td>30</td><td>8,981</td><td>17,120</td><td>28,52</td><td>40,96</td><td>59,64</td><td>83,24</td><td>114,30</td><td>144,8</td><td>193,0</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td></tr>\n<tr>\n<td>32</td><td>9,426</td><td>17,910</td><td>29,43</td><td>42,59</td><td>61,87</td><td>86,19</td><td>118,00</td><td>149,4</td><td>198,6</td><td>237,0</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td></tr>\n<tr>\n<td>35</td><td>10,090</td><td>19,090</td><td>31,28</td><td>45,34</td><td>65,24</td><td>90,62</td><td>123,60</td><td>156,3</td><td>207,0</td><td>246,9</td><td>340,6</td><td>-</td><td>-</td><td>-</td><td>-</td></tr>\n<tr>\n<td>38</td><td>10,760</td><td>20,280</td><td>33,18</td><td>48,00</td><td>68,59</td><td>95,04</td><td>129,20</td><td>163,2</td><td>215,4</td><td>256,9</td><td>353,3</td><td>-</td><td>-</td><td>-</td><td>-</td></tr>\n<tr>\n<td>40</td><td>11,200</td><td>21,070</td><td>34,36</td><td>49,78</td><td>71,25</td><td>97,99</td><td>132,90</td><td>167,8</td><td>221,0</td><td>263,5</td><td>361,8</td><td>474,8</td><td>-</td><td>-</td><td>-</td></tr>\n<tr>\n<td>45</td><td>12,310</td><td>23,040</td><td>37,45</td><td>54,22</td><td>77,30</td><td>105,70</td><td>142,10</td><td>179,4</td><td>235,0</td><td>280,1</td><td>373,0</td><td>500,9</td><td>-</td><td>-</td><td>-</td></tr>\n<tr>\n<td>50</td><td>13,420</td><td>25,020</td><td>40,53</td><td>58,67</td><td>83,35</td><td>113,60</td><td>152,40</td><td>190,9</td><td>249,0</td><td>296,7</td><td>404,1</td><td>526,9</td><td>834,5</td><td>-</td><td>-</td></tr>\n<tr>\n<td>55</td><td>14,530</td><td>26,990</td><td>43,62</td><td>63,11</td><td>89,39</td><td>121,50</td><td>162,40</td><td>203,7</td><td>263,1</td><td>313,3</td><td>425,3</td><td>553,0</td><td>872,1</td><td>1304</td><td>-</td></tr>\n<tr>\n<td>60</td><td>15,640</td><td>28,970</td><td>46,70</td><td>67,55</td><td>95,44</td><td>129,40</td><td>172,40</td><td>216,0</td><td>278,9</td><td>329,9</td><td>446,5</td><td>579,0</td><td>909,8</td><td>1356</td><td>-</td></tr>\n<tr>\n<td>65</td><td>16,760</td><td>30,940</td><td>49,79</td><td>71,99</td><td>101,50</td><td>137,30</td><td>182,40</td><td>228,4</td><td>293,8</td><td>348,8</td><td>467,7</td><td>605,1</td><td>947,4</td><td>1407</td><td>2009</td></tr>\n<tr>\n<td>70</td><td>17,870</td><td>32,910</td><td>52,87</td><td>76,44</td><td>107,50</td><td>145,20</td><td>192,40</td><td>240,7</td><td>308,8</td><td>366,5</td><td>491,1</td><td>631,1</td><td>985,0</td><td>1458</td><td>2076</td></tr>\n<tr>\n<td>75</td><td>18,980</td><td>34,890</td><td>55,96</td><td>80,88</td><td>113,60</td><td>153,10</td><td>202,40</td><td>253,0</td><td>323,7</td><td>384,3</td><td>513,6</td><td>659,7</td><td>1023,0</td><td>1509</td><td>2143</td></tr>\n<tr>\n<td>80</td><td>20,090</td><td>36,860</td><td>59,04</td><td>85,33</td><td>119,60</td><td>161,00</td><td>212,40</td><td>265,0</td><td>338,6</td><td>402,1</td><td>536,1</td><td>687,5</td><td>1061,0</td><td>1561</td><td>2211</td></tr>\n<tr>\n<td>85</td><td>21,200</td><td>38,840</td><td>62,13</td><td>89,77</td><td>125,70</td><td>168,90</td><td>222,40</td><td>277,7</td><td>353,6</td><td>419,8</td><td>558,6</td><td>715,2</td><td>1098,0</td><td>1612</td><td>2278</td></tr>\n<tr>\n<td>90</td><td>22,310</td><td>40,810</td><td>65,21</td><td>94,20</td><td>131,70</td><td>176,80</td><td>232,40</td><td>290,1</td><td>368,5</td><td>437,6</td><td>581,0</td><td>743,0</td><td>1141,0</td><td>1663</td><td>2345</td></tr>\n<tr>\n<td>95</td><td>-</td><td>42,790</td><td>68,30</td><td>98,64</td><td>137,80</td><td>184,70</td><td>242,40</td><td>302,4</td><td>383,4</td><td>455,4</td><td>603,5</td><td>770,8</td><td>1181,0</td><td>1715</td><td>2412</td></tr>\n<tr>\n<td>100</td><td>-</td><td>44,760</td><td>71,38</td><td>103,10</td><td>143,80</td><td>192,60</td><td>252,40</td><td>314,7</td><td>398,3</td><td>473,2</td><td>626,0</td><td>798,5</td><td>1221,0</td><td>1766</td><td>2479</td></tr>\n<tr>\n<td>105</td><td>-</td><td>-</td><td>74,47</td><td>107,50</td><td>149,90</td><td>200,50</td><td>262,40</td><td>327,1</td><td>413,3</td><td>490,9</td><td>648,5</td><td>826,3</td><td>1261,0</td><td>1826</td><td>2546</td></tr>\n<tr>\n<td>110</td><td>-</td><td>-</td><td>77,55</td><td>112,00</td><td>155,90</td><td>208,40</td><td>272,30</td><td>339,4</td><td>428,2</td><td>508,7</td><td>671,0</td><td>854,1</td><td>1301,0</td><td>1880</td><td>2614</td></tr>\n<tr>\n<td>115</td><td>-</td><td>-</td><td>80,63</td><td>116,40</td><td>162,00</td><td>216,30</td><td>282,30</td><td>351,8</td><td>443,1</td><td>526,5</td><td>693,5</td><td>881,8</td><td>1341,0</td><td>1934</td><td>2690</td></tr>\n<tr>\n<td>120</td><td>-</td><td>-</td><td>83,72</td><td>120,90</td><td>168,00</td><td>224,20</td><td>292,30</td><td>364,1</td><td>458,1</td><td>544,2</td><td>716,0</td><td>909,6</td><td>1381,0</td><td>1989</td><td>2760</td></tr>\n<tr>\n<td>125</td><td>-</td><td>-</td><td>86,80</td><td>125,30</td><td>174,00</td><td>232,10</td><td>302,30</td><td>376,4</td><td>473,0</td><td>562,0</td><td>738,5</td><td>937,4</td><td>1421,0</td><td>2043</td><td>2831</td></tr>\n<tr>\n<td>130</td><td>-</td><td>-</td><td>89,89</td><td>129,70</td><td>180,10</td><td>240,00</td><td>312,30</td><td>388,8</td><td>487,9</td><td>579,8</td><td>761,0</td><td>965,2</td><td>1461,0</td><td>2098</td><td>2903</td></tr>\n<tr>\n<td>140</td><td>-</td><td>-</td><td>96,06</td><td>138,60</td><td>192,20</td><td>255,80</td><td>332,30</td><td>413,5</td><td>517,8</td><td>615,3</td><td>806,0</td><td>1021,0</td><td>1541,0</td><td>2207</td><td>3045</td></tr>\n<tr>\n<td>150</td><td>-</td><td>-</td><td>102,18</td><td>147,50</td><td>204,30</td><td>271,60</td><td>352,30</td><td>438,1</td><td>547,6</td><td>650,8</td><td>850,1</td><td>1076,0</td><td>1621,0</td><td>2315</td><td>3187</td></tr>\n<tr>\n<td>160</td><td>-</td><td>-</td><td>108,38</td><td>156,40</td><td>216,40</td><td>287,40</td><td>372,30</td><td>462,8</td><td>577,5</td><td>686,4</td><td>895,9</td><td>1132,0</td><td>1701,0</td><td>2424</td><td>3329</td></tr>\n<tr>\n<td>170</td><td>-</td><td>-</td><td>114,58</td><td>165,30</td><td>228,50</td><td>303,20</td><td>392,30</td><td>487,5</td><td>607,4</td><td>721,9</td><td>940,9</td><td>1188,0</td><td>1780,0</td><td>2533</td><td>3471</td></tr>\n<tr>\n<td>180</td><td>-</td><td>-</td><td>120,68</td><td>174,20</td><td>240,60</td><td>319,00</td><td>412,30</td><td>512,2</td><td>637,2</td><td>757,5</td><td>985,9</td><td>1243,0</td><td>1860,0</td><td>2642</td><td>3614</td></tr>\n<tr>\n<td>190</td><td>-</td><td>-</td><td>126,88</td><td>183,10</td><td>252,70</td><td>333,80</td><td>432,30</td><td>536,9</td><td>667,1</td><td>793,0</td><td>1031,0</td><td>1299,0</td><td>1940,0</td><td>2751</td><td>3756</td></tr>\n<tr>\n<td>200</td><td>-</td><td>-</td><td>133,08</td><td>191,90</td><td>264,70</td><td>350,60</td><td>452,20</td><td>561,5</td><td>697,0</td><td>828,6</td><td>1076,0</td><td>1354,0</td><td>2020,0</td><td>2860</td><td>3898</td></tr>\n<tr>\n<td>220</td><td>-</td><td>-</td><td>-</td><td>209,70</td><td>228,90</td><td>382,20</td><td>492,20</td><td>610,9</td><td>756,7</td><td>899,6</td><td>1166,0</td><td>1465,0</td><td>2180,0</td><td>3077</td><td>4182</td></tr>\n<tr>\n<td>240</td><td>-</td><td>-</td><td>-</td><td>227,50</td><td>313,10</td><td>413,80</td><td>532,20</td><td>660,3</td><td>816,4</td><td>970,8</td><td>1256,0</td><td>1576,0</td><td>2340,0</td><td>3295</td><td>4466</td></tr>\n<tr>\n<td>260</td><td>-</td><td>-</td><td>-</td><td>245,20</td><td>337,60</td><td>445,40</td><td>572,20</td><td>709,6</td><td>876,1</td><td>1042,0</td><td>1346,0</td><td>1687,0</td><td>2500,0</td><td>3513</td><td>4751</td></tr>\n<tr>\n<td>280</td><td>-</td><td>-</td><td>-</td><td>-</td><td>361,50</td><td>476,90</td><td>612,20</td><td>759,0</td><td>935,9</td><td>1113,0</td><td>1436,0</td><td>1798,0</td><td>2660,0</td><td>3730</td><td>5035</td></tr>\n<tr>\n<td>300</td><td>-</td><td>-</td><td>-</td><td>-</td><td>385,70</td><td>508,50</td><td>652,20</td><td>808,3</td><td>995,6</td><td>1184,0</td><td>1526,0</td><td>1910,0</td><td>2820,0</td><td>3948</td><td>5319</td></tr></tbody></table>\n</details>\n\nЗаписанная в виде словаря (скопировать в программу)\n\n``` python\nbolts = {'М6': {8: 4.306, 10: 4.712, 12: 5.118, 14: 5.524, 16: 5.93, 18: 6.336, 20: 6.742, 22: 7.204, 25: 7.871, 28: 8.537, 30: 8.981, 32: 9.426, 35: 10.09, 38: 10.76, 40: 11.2, 45: 12.31, 50: 13.42, 55: 14.53, 60: 15.64, 65: 16.76, 70: 17.87, 75: 18.98, 80: 20.09, 85: 21.2, 90: 22.31, 95: None, 100: None, 105: None, 110: None, 115: None, 120: None, 125: None, 130: None, 140: None, 150: None, 160: None, 170: None, 180: None, 190: None, 200: None, 220: None, 240: None, 260: None, 280: None, 300: None}, 'М8': {8: 8.668, 10: 9.394, 12: 10.12, 14: 10.85, 16: 11.57, 18: 12.3, 20: 13.02, 22: 13.52, 25: 14.84, 28: 16.33, 30: 17.12, 32: 17.91, 35: 19.09, 38: 20.28, 40: 21.07, 45: 23.04, 50: 25.02, 55: 26.99, 60: 28.97, 65: 30.94, 70: 32.91, 75: 34.89, 80: 36.86, 85: 38.84, 90: 40.81, 95: 42.79, 100: 44.76, 105: None, 110: None, 115: None, 120: None, 125: None, 130: None, 140: None, 150: None, 160: None, 170: None, 180: None, 190: None, 200: None, 220: None, 240: None, 260: None, 280: None, 300: None}, 'М10': {8: None, 10: 16.68, 12: 17.82, 14: 18.96, 16: 20.1, 18: 21.23, 20: 22.37, 22: 23.51, 25: 25.22, 28: 26.92, 30: 28.52, 32: 29.43, 35: 31.28, 38: 33.18, 40: 34.36, 45: 37.45, 50: 40.53, 55: 43.62, 60: 46.7, 65: 49.79, 70: 52.87, 75: 55.96, 80: 59.04, 85: 62.13, 90: 65.21, 95: 68.3, 100: 71.38, 105: 74.47, 110: 77.55, 115: 80.63, 120: 83.72, 125: 86.8, 130: 89.89, 140: 96.06, 150: 102.18, 160: 108.38, 170: 114.58, 180: 120.68, 190: 126.88, 200: 133.08, 220: None, 240: None, 260: None, 280: None, 300: None}, 'М12': {8: None, 10: None, 12: None, 14: 27.89, 16: 29.48, 18: 31.12, 20: 32.76, 22: 34.4, 25: 36.86, 28: 39.32, 30: 40.96, 32: 42.59, 35: 45.34, 38: 48.0, 40: 49.78, 45: 54.22, 50: 58.67, 55: 63.11, 60: 67.55, 65: 71.99, 70: 76.44, 75: 80.88, 80: 85.33, 85: 89.77, 90: 94.2, 95: 98.64, 100: 103.1, 105: 107.5, 110: 112.0, 115: 116.4, 120: 120.9, 125: 125.3, 130: 129.7, 140: 138.6, 150: 147.5, 160: 156.4, 170: 165.3, 180: 174.2, 190: 183.1, 200: 191.9, 220: 209.7, 240: 227.5, 260: 245.2, 280: None, 300: None}, 'М14': {8: None, 10: None, 12: None, 14: None, 16: 43.98, 18: 46.21, 20: 48.45, 22: 50.69, 25: 54.05, 28: 57.4, 30: 59.64, 32: 61.87, 35: 65.24, 38: 68.59, 40: 71.25, 45: 77.3, 50: 83.35, 55: 89.39, 60: 95.44, 65: 101.5, 70: 107.5, 75: 113.6, 80: 119.6, 85: 125.7, 90: 131.7, 95: 137.8, 100: 143.8, 105: 149.9, 110: 155.9, 115: 162.0, 120: 168.0, 125: 174.0, 130: 180.1, 140: 192.2, 150: 204.3, 160: 216.4, 170: 228.5, 180: 240.6, 190: 252.7, 200: 264.7, 220: 228.9, 240: 313.1, 260: 337.6, 280: 361.5, 300: 385.7}, 'М16': {8: None, 10: None, 12: None, 14: None, 16: None, 18: 65.54, 20: 68.49, 22: 71.44, 25: 75.87, 28: 80.29, 30: 83.24, 32: 86.19, 35: 90.62, 38: 95.04, 40: 97.99, 45: 105.7, 50: 113.6, 55: 121.5, 60: 129.4, 65: 137.3, 70: 145.2, 75: 153.1, 80: 161.0, 85: 168.9, 90: 176.8, 95: 184.7, 100: 192.6, 105: 200.5, 110: 208.4, 115: 216.3, 120: 224.2, 125: 232.1, 130: 240.0, 140: 255.8, 150: 271.6, 160: 287.4, 170: 303.2, 180: 319.0, 190: 333.8, 200: 350.6, 220: 382.2, 240: 413.8, 260: 445.4, 280: 476.9, 300: 508.5}, 'М18': {8: None, 10: None, 12: None, 14: None, 16: None, 18: None, 20: 95.81, 22: 99.52, 25: 105.1, 28: 110.6, 30: 114.3, 32: 118.0, 35: 123.6, 38: 129.2, 40: 132.9, 45: 142.1, 50: 152.4, 55: 162.4, 60: 172.4, 65: 182.4, 70: 192.4, 75: 202.4, 80: 212.4, 85: 222.4, 90: 232.4, 95: 242.4, 100: 252.4, 105: 262.4, 110: 272.3, 115: 282.3, 120: 292.3, 125: 302.3, 130: 312.3, 140: 332.3, 150: 352.3, 160: 372.3, 170: 392.3, 180: 412.3, 190: 432.3, 200: 452.2, 220: 492.2, 240: 532.2, 260: 572.2, 280: 612.2, 300: 652.2}, 'М20': {8: None, 10: None, 12: None, 14: None, 16: None, 18: None, 20: None, 22: None, 25: 133.3, 28: 140.2, 30: 144.8, 32: 149.4, 35: 156.3, 38: 163.2, 40: 167.8, 45: 179.4, 50: 190.9, 55: 203.7, 60: 216.0, 65: 228.4, 70: 240.7, 75: 253.0, 80: 265.0, 85: 277.7, 90: 290.1, 95: 302.4, 100: 314.7, 105: 327.1, 110: 339.4, 115: 351.8, 120: 364.1, 125: 376.4, 130: 388.8, 140: 413.5, 150: 438.1, 160: 462.8, 170: 487.5, 180: 512.2, 190: 536.9, 200: 561.5, 220: 610.9, 240: 660.3, 260: 709.6, 280: 759.0, 300: 808.3}, 'М22': {8: None, 10: None, 12: None, 14: None, 16: None, 18: None, 20: None, 22: None, 25: None, 28: None, 30: 193.0, 32: 198.6, 35: 207.0, 38: 215.4, 40: 221.0, 45: 235.0, 50: 249.0, 55: 263.1, 60: 278.9, 65: 293.8, 70: 308.8, 75: 323.7, 80: 338.6, 85: 353.6, 90: 368.5, 95: 383.4, 100: 398.3, 105: 413.3, 110: 428.2, 115: 443.1, 120: 458.1, 125: 473.0, 130: 487.9, 140: 517.8, 150: 547.6, 160: 577.5, 170: 607.4, 180: 637.2, 190: 667.1, 200: 697.0, 220: 756.7, 240: 816.4, 260: 876.1, 280: 935.9, 300: 995.6}, 'М24': {8: None, 10: None, 12: None, 14: None, 16: None, 18: None, 20: None, 22: None, 25: None, 28: None, 30: None, 32: 237.0, 35: 246.9, 38: 256.9, 40: 263.5, 45: 280.1, 50: 296.7, 55: 313.3, 60: 329.9, 65: 348.8, 70: 366.5, 75: 384.3, 80: 402.1, 85: 419.8, 90: 437.6, 95: 455.4, 100: 473.2, 105: 490.9, 110: 508.7, 115: 526.5, 120: 544.2, 125: 562.0, 130: 579.8, 140: 615.3, 150: 650.8, 160: 686.4, 170: 721.9, 180: 757.5, 190: 793.0, 200: 828.6, 220: 899.6, 240: 970.8, 260: 1042.0, 280: 1113.0, 300: 1184.0}, 'М27': {8: None, 10: None, 12: None, 14: None, 16: None, 18: None, 20: None, 22: None, 25: None, 28: None, 30: None, 32: None, 35: 340.6, 38: 353.3, 40: 361.8, 45: 373.0, 50: 404.1, 55: 425.3, 60: 446.5, 65: 467.7, 70: 491.1, 75: 513.6, 80: 536.1, 85: 558.6, 90: 581.0, 95: 603.5, 100: 626.0, 105: 648.5, 110: 671.0, 115: 693.5, 120: 716.0, 125: 738.5, 130: 761.0, 140: 806.0, 150: 850.1, 160: 895.9, 170: 940.9, 180: 985.9, 190: 1031.0, 200: 1076.0, 220: 1166.0, 240: 1256.0, 260: 1346.0, 280: 1436.0, 300: 1526.0}, 'М30': {8: None, 10: None, 12: None, 14: None, 16: None, 18: None, 20: None, 22: None, 25: None, 28: None, 30: None, 32: None, 35: None, 38: None, 40: 474.8, 45: 500.9, 50: 526.9, 55: 553.0, 60: 579.0, 65: 605.1, 70: 631.1, 75: 659.7, 80: 687.5, 85: 715.2, 90: 743.0, 95: 770.8, 100: 798.5, 105: 826.3, 110: 854.1, 115: 881.8, 120: 909.6, 125: 937.4, 130: 965.2, 140: 1021.0, 150: 1076.0, 160: 1132.0, 170: 1188.0, 180: 1243.0, 190: 1299.0, 200: 1354.0, 220: 1465.0, 240: 1576.0, 260: 1687.0, 280: 1798.0, 300: 1910.0}, 'М36': {8: None, 10: None, 12: None, 14: None, 16: None, 18: None, 20: None, 22: None, 25: None, 28: None, 30: None, 32: None, 35: None, 38: None, 40: None, 45: None, 50: 834.5, 55: 872.1, 60: 909.8, 65: 947.4, 70: 985.0, 75: 1023.0, 80: 1061.0, 85: 1098.0, 90: 1141.0, 95: 1181.0, 100: 1221.0, 105: 1261.0, 110: 1301.0, 115: 1341.0, 120: 1381.0, 125: 1421.0, 130: 1461.0, 140: 1541.0, 150: 1621.0, 160: 1701.0, 170: 1780.0, 180: 1860.0, 190: 1940.0, 200: 2020.0, 220: 2180.0, 240: 2340.0, 260: 2500.0, 280: 2660.0, 300: 2820.0}, 'М42': {8: None, 10: None, 12: None, 14: None, 16: None, 18: None, 20: None, 22: None, 25: None, 28: None, 30: None, 32: None, 35: None, 38: None, 40: None, 45: None, 50: None, 55: 1304.0, 60: 1356.0, 65: 1407.0, 70: 1458.0, 75: 1509.0, 80: 1561.0, 85: 1612.0, 90: 1663.0, 95: 1715.0, 100: 1766.0, 105: 1826.0, 110: 1880.0, 115: 1934.0, 120: 1989.0, 125: 2043.0, 130: 2098.0, 140: 2207.0, 150: 2315.0, 160: 2424.0, 170: 2533.0, 180: 2642.0, 190: 2751.0, 200: 2860.0, 220: 3077.0, 240: 3295.0, 260: 3513.0, 280: 3730.0, 300: 3948.0}, 'М48': {8: None, 10: None, 12: None, 14: None, 16: None, 18: None, 20: None, 22: None, 25: None, 28: None, 30: None, 32: None, 35: None, 38: None, 40: None, 45: None, 50: None, 55: None, 60: None, 65: 2009.0, 70: 2076.0, 75: 2143.0, 80: 2211.0, 85: 2278.0, 90: 2345.0, 95: 2412.0, 100: 2479.0, 105: 2546.0, 110: 2614.0, 115: 2690.0, 120: 2760.0, 125: 2831.0, 130: 2903.0, 140: 3045.0, 150: 3187.0, 160: 3329.0, 170: 3471.0, 180: 3614.0, 190: 3756.0, 200: 3898.0, 220: 4182.0, 240: 4466.0, 260: 4751.0, 280: 5035.0, 300: 5319.0}}\n```\n\nа) Пользователь вводит диаметр, длину и количество болтов (три <code>input()</code>'а), программа выводит массу в кг. Если такого болта не существует, программа тоже об этом сообщает.\n\n*Примечание: если в словаре стоит None, значит такого болта по ГОСТу не существует.*\n\nб) Преобразовать словарь в одноуровневый словарь, где ключ - это кортеж вида ```(диаметр, длина)```, а значение - масса **одного** такого болта. Несуществующие болты (где вес - это None) в новый словарь не добавлять. Число в обозначениях вида \"М6\", \"М8\" ... \"М48\" и есть диаметр болта в мм.\n\n``` python\nbolts2 = {\n    (6, 8): 0.004306,\n    (8, 8): 0.008668,\n    (6, 10): 0.004712,\n    ...\n    (48, 300): 5.319\n}\n```\n\nв) Решить пункт (а), но с новым словарём из пункта (б)"
        }
      ],
      "Задачи на работу с файлами": [
        {
          "title": "Аэропорт",
          "title_machine_friendly": "Python1_Zadachi_na_rabotu_s_fajlami_Aeroport",
          "section": "Задачи на работу с файлами",
          "text": "Читаем файл простой csv.\n<details><summary>Исходные данные для задачи (total-passenger-arrival-2009-2019.csv)</summary>\n<pre>\n2009-01,3073677\n2009-02,2558953\n2009-03,2901885\n2009-04,2914509\n2009-05,2787124\n2009-06,3053035\n2009-07,3169720\n2009-08,3162960\n2009-09,3063650\n2009-10,3320887\n2009-11,3365250\n2009-12,3832328\n2010-01,3384473\n2010-02,3108244\n2010-03,3448617\n2010-04,3283071\n2010-05,3389972\n2010-06,3621082\n2010-07,3673387\n2010-08,3467630\n2010-09,3393497\n2010-10,3581850\n2010-11,3623080\n2010-12,4063874\n2011-01,3787070\n2011-02,3390264\n2011-03,3708592\n2011-04,3731875\n2011-05,3773137\n2011-06,4011823\n2011-07,4172971\n2011-08,3855722\n2011-09,3817720\n2011-10,3878788\n2011-11,3890535\n2011-12,4525348\n2012-01,4244834\n2012-02,3770270\n2012-03,4277559\n2012-04,4206420\n2012-05,4089894\n2012-06,4402693\n2012-07,4360693\n2012-08,4276912\n2012-09,4002344\n2012-10,4268532\n2012-11,4365456\n2012-12,4916197\n2013-01,4325530\n2013-02,4117962\n2013-03,4608339\n2013-04,4240461\n2013-05,4281153\n2013-06,4669334\n2013-07,4536572\n2013-08,4678005\n2013-09,4279588\n2013-10,4405289\n2013-11,4464415\n2013-12,5119439\n2014-01,4596764\n2014-02,4109038\n2014-03,4493991\n2014-04,4383872\n2014-05,4368639\n2014-06,4654569\n2014-07,4581591\n2014-08,4649022\n2014-09,4256229\n2014-10,4490180\n2014-11,4415710\n2014-12,5093465\n2015-01,4420122\n2015-02,4121357\n2015-03,4535119\n2015-04,4391381\n2015-05,4480261\n2015-06,4699589\n2015-07,4893574\n2015-08,4955301\n2015-09,4421554\n2015-10,4600789\n2015-11,4636752\n2015-12,5293165\n2016-01,4860156\n2016-02,4602026\n2016-03,4902767\n2016-04,4793662\n2016-05,4781918\n2016-06,4838307\n2016-07,5181108\n2016-08,4923309\n2016-09,4584383\n2016-10,4768937\n2016-11,4784818\n2016-12,5676648\n2017-01,5256301\n2017-02,4669729\n2017-03,5112576\n2017-04,5168548\n2017-05,5003578\n2017-06,5208779\n2017-07,5415734\n2017-08,5265703\n2017-09,4927561\n2017-10,5155327\n2017-11,5173747\n2017-12,5861990\n2018-01,5303639\n2018-02,4932345\n2018-03,5555117\n2018-04,5430745\n2018-05,5294980\n2018-06,5565775\n2018-07,5723094\n2018-08,5682688\n2018-09,5225903\n2018-10,5376234\n2018-11,5408993\n2018-12,6127843\n2019-01,5656076\n2019-02,5131807\n2019-03,5630780\n2019-04,5580503\n2019-05,5407308\n2019-06,5816089\n2019-07,5910782\n2019-08,5900629\n2019-09,5469342\n2019-10,5646643\n</pre>\n</details>\n\nПонадобится файл ```total-passenger-arrival-2009-2019.csv```. Первая колонка в файле - месяц, вторая - количество посетителей аэропорта в этом месяцею\n\nа) Составить словарь, в котором ключ - это месяц в виде строки ```str```, значение - количество посетителей в этом месяцев виде числа ```int```\n\n``` python\npassengers = {\n    '2009-01': 3073677,\n    '2009-02': 2558953,\n    '2009-03': 2901885,\n    '2009-04': 2914509,\n    '2009-05': 2787124,\n    '2009-06': 3053035,"
        },
        {
          "title": "Премии за год",
          "title_machine_friendly": "Python1_Zadachi_na_rabotu_s_fajlami_Premii_za_god",
          "section": "Задачи на работу с файлами",
          "text": "Формируем файл csv\n\nНа основе задачи про количество дней в месяцах (словаре days), составить текстовый файл вида:\n\nа)\n```\njan,15500\nfeb,14000\nmar,15500\n…\ndec,15500\ntotal,99999\n```\n\nПравая колонка - премия за месяц из расчёта 500р/календарный день (количество дней в феврале - как в текущем году). Последняя строчка - \"итого\" за весь год.\n\n★ б)\n```\nmonth;bonus\njan;15942,37\nfeb;14399,56\nmar;15942,37\n...\ndec;15942,37\ntotal;187708,55\n```\nАналогично пункту (а), но размер премии 514р 27коп в календарный день. Числа округляется до копеек, дробная часть отделяется запятой, а не точкой. Разделитель между колонками - точка с запятой, а не просто запятая. Первая строчка файла - \"шапка\" с названием столбцов."
        },
        {
          "title": "Кредиты",
          "title_machine_friendly": "Python1_Zadachi_na_rabotu_s_fajlami_Kredity",
          "section": "Задачи на работу с файлами",
          "text": "Понадобятся файлы Кредиты.csv и Кредиты.fwf\n\n<details><summary>Исходные данные для задачи (Кредиты.csv)</summary>\n<pre>\n50000,12\n100000,36\n500000,24\n1000000,12\n40000,36\n250000,24\n180000,24\n95000,12\n450000,36\n360850,24\n123456,24\n256100,36\n121500,24\n36000,12\n950600,36\n</pre>\n</details>\n\n<details><summary>Исходные данные для задачи (Кредиты.fwf)</summary>\n<pre>\n50000   12\n100000  36\n500000  24\n1000000 12\n40000   36\n250000  24\n180000  24\n95000   12\n450000  36\n360850  24\n123456  24\n256100  36\n121500  24\n36000   12\n950600  36\n</pre>\n</details>\n\nа) Прочитать данные из файла csv в любое выбранное вами хранилище (словари, списки, ...). Первая колонка - желаемая сумма кредита, вторая - срок кредита в месяцах.\n\nб) Для каждой строки посчитать ежемесячный платёж по формуле из задачи про кредитный калькулятор (1.4), процентная ставка - та же. Составить новый файл csv, в котором будет уже три колонки: две старые и колонка с суммой платежа.\n\nв) То же самое, но входной файл - в формате fwf (колонки имеют равную ширину и отделены разным числорм пробелов). Выходной файл сформировать в том же формате."
        }
      ],
      "Задачи на функции и модули": [
        {
          "title": "Упражнения",
          "title_machine_friendly": "Python1_Zadachi_na_funktsii_i_moduli_Uprazhnenija",
          "section": "Задачи на функции и модули",
          "text": "Написать функции, которые:\n\nа) Переводят метры в дюймы и обратно. 1 дюйм = 0.0254м.\n\n``` python\nx_inch = m_to_inch(1.23)"
        },
        {
          "title": "Вычисляем число пи",
          "title_machine_friendly": "Python1_Zadachi_na_funktsii_i_moduli_Vychisljaem_chislo_pi",
          "section": "Задачи на функции и модули",
          "text": "а) Написать функцию для вычисления числа пи по формуле ниже:\n\n![\\Large\\pi=4\\cdot\\left(1-{\\frac{1}{3}}+{\\frac{1}{5}}-{\\frac{1}{7}}+{\\frac{1}{9}}-{\\frac{1}{11}}+{\\frac{1}{13}}-{\\frac{1}{15}}+{\\frac{1}{17}}-{\\frac{1}{19}}+{\\frac{1}{21}}-\\cdots\\right)=\\newline=4\\cdot\\sum_{{n=0}}^{\\infty}\\{\\frac{(-1)^{n}}{2n+1}}=4\\cdot\\sum_{{n=1}}^{\\infty}\\{\\frac{(-1)^{n+1}}{2n-1}}](https://latex.codecogs.com/svg.latex?\\Large\\pi=4\\cdot\\left(1-{\\frac{1}{3}}+{\\frac{1}{5}}-{\\frac{1}{7}}+{\\frac{1}{9}}-{\\frac{1}{11}}+{\\frac{1}{13}}-{\\frac{1}{15}}+{\\frac{1}{17}}-{\\frac{1}{19}}+{\\frac{1}{21}}-\\cdots\\right)=\\newline=4\\cdot\\sum_{{n=0}}^{\\infty}\\{\\frac{(-1)^{n}}{2n+1}}=4\\cdot\\sum_{{n=1}}^{\\infty}\\{\\frac{(-1)^{n+1}}{2n-1}})\n\nНа входе - количество слагаемых. Мы не можем посчитать бесконечное число слагаемых, как указанное в формуле, но можем посчитать большое конечное число.\n``` python\nmy_pi = calc_pi(1000000)\n```\n\nб) Сравнить результат с эталонным числом пи [math.pi](https://docs.python.org/3/library/math.html"
        }
      ]
    }
  },
  "meta": {
    "date": "2021-06-26",
    "tasks": 27,
    "title_max_length": 31,
    "text_max_length": 19039,
    "section_max_length": 38
  }
}